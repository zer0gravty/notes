from flask import Flask, render_template
import datetime

app = Flask(__name__)

@app.route("/")
def index():
    return "Hello, world!"

@app.route("/<string:name>")
def hello(name):
    name = name.capitalize()
    return "<h1>Hello, {name}</h1>"

#Now, from the render_template library:
#Make sure it is immediately in a sub-directory called "templates"; this is the only place Flask knows to look 

@app.route("/")
def index():
    render_template("index.html")


@app.route("/")
def index():
    headline = "Some shit"
    return render_template("index.html", headline=headline)

#In HTML, it can be dynamically generated by the above variable.
#<h1> {{headline}} </h1> will render with the headline variable from the previous code.

@app.route = ("/bye")
def bye():
    headline = "Goodbye!"
    return render_template("index.html", headline=headline)

#This will change the template to display the variable.

Jinga gets installed with Flask
<body>
    {% if new_year %}
        <h1>Happy New Year!</h1>
    {% else %}
        <h1>No</h1>
    {% endif %}
</body>

    {% for name in names %}
        <li> {{name}} </li>
    {% endfor %}

#Other Jinga syntax calling a link to a different route defined by the python code.
#url_for is a built-in function
    <a href=" {{ url_for('more') }} ">See more...</a>
    
#layout.HTML
<h1>{% block heading %}{% endblock %}</h1>
<body>
    {% block body %}
    {% endblock %}
</body>

in each html file:
{% extends "layout.html" %}

{% block heading %}
    First Page
{% endblock %}

{% block body %}
    <p>Some dumb stuff.</p>
    <a href="{{ url_for('index') }}">Go home</a>
{% endblock %}


#setting the variable: export FLASK_APP=application.py
#to run: flask run (from the directory you want to run the server)